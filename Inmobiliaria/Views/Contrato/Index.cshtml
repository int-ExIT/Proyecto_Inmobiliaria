@model IEnumerable<Inmobiliaria.Models.Contrato>
@{
  ViewData["Title"] = "Contratos";
  ViewData["Subtitle"] = " Contratos";
}

<div class="container-fluid text-center d-flex gap-2">
  @* Modal de informacion y edicion *@
  @await Html.PartialAsync("_ViewInfoModal")

  <div class="d-flex flex-column col-4 bg-dark p-3 text-white gap-2">
    @* --------------------------------------------------------- TITLE --- *@
    <div>
      <h1>Bienvenido a Contratos</h1>
    </div>

    @* -------------------------------------------------------- INPUTS --- *@
    <form class="d-flex gap-3 justify-content-center">
      @Html.AntiForgeryToken()

      <div class="d-flex flex-column align-items-start gap-2">
        <label for="search-propietario">Propietario </label>
        <input type="text" style="width: 150px;" name="search-propietario" id="search-propietario" autocomplete="off">
      </div>

      <div class="d-flex flex-column align-items-start gap-2">
        <label for="search-inquilino">Inquilino </label>
        <input type="text" style="width: 150px;" name="search-inquilino" id="search-inquilino" autocomplete="off">
      </div>
    </form>

    @* ------------------------------------------------------- FILTERS --- *@
    <div class="d-flex justify-content-center gap-2 m-0 p-0">
      <div>
        <label for="finalizado" class="m-0 p-0">Finalizados</label>
        <input type="checkbox" name="finalizado" id="finalizado" class="m-0 p-0">
      </div>
      <div>
        <label for="vigente" class="m-0 p-0">Vigentes</label>
        <input type="checkbox" name="vigente" id="vigente" class="m-0 p-0">
      </div>
      <div>
        <label for="cancelado" class="m-0 p-0">Cancelados</label>
        <input type="checkbox" name="cancelado" id="cancelado" class="m-0 p-0">
      </div>
      <div>
        <label for="pendiente" class="m-0 p-0">Pendientes</label>
        <input type="checkbox" name="pendiente" id="pendiente" class="m-0 p-0">
      </div>
    </div>

    @* ---------------------------------------------------------- DATA --- *@
    <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
      <table class="table table-dark" style="overflow: auto;">
        <thead>
          <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>DNI</th>
          </tr>
        </thead>
        <tbody id="body-table">
        </tbody>
      </table>
    </div>
  </div>

  <div class="div-body d-flex flex-wrap justify-content-start">
    <ul class="list list-unstyled p-0 m-0"></ul>
  </div>

  <template id="my-template">
    <li>
      @* -------------------------------------------------------- CARD --- *@
      <div class="card border-dark m-1 d-flex" style="width: 900px; height: 65px;">
        @* ----------------------------------------------- CARD-HEADER --- *@
        <div class="card-header d-flex position-relative bg-dark text-white h-100 w-100">
          @* --------------------------------------- CARD-HEADER-TITLE --- *@
          <div class="my-auto d-flex flex-column position-absolute start-0 mx-4">
            <h5 class="card-prop card-title mb-0"></h5>
            <small class="card-date mb-0"></small>
          </div>
          @* ------------------------------------- CARD-HEADER-ACTIONS --- *@
          <div class="my-2 d-flex position-absolute end-0 mx-2">
            <button class="btn-info btn btn-sm bg-primary text-white mx-1" data-bs-toggle="modal"
              data-bs-target="#viewInfoModal">
              Ver mas
            </button>
          </div>
        </div>
        <div class="card-body position-absolute start-0 h-100 p-0">
          <p class="p-2 m-0"> </p>
        </div>
      </div>
    </li>
  </template>
</div>
@section Scripts
{
  @await Html.PartialAsync("_ValidationsScriptsPartial")

  <script type="module">
    // ELEMENTS MODAL
    const $modal_info = document.querySelector('#viewInfoModal');
    const $modal_btn_edit = $modal_info.querySelector('.moda-btn-edit');
    const $modal_btn_send = $modal_info.querySelector('.moda-btn-send');
    // STRUCTURES
    const $list = document.querySelector('.list');
    const $table = document.querySelector('#body-table');
    const $template = document.querySelector('#my-template');
    // INPUTS
    const $propietarios = document.querySelector('#search-propietario');
    const $inquilinos = document.querySelector('#search-inquilino');
    const $checkboxes = document.querySelectorAll('input[type="checkbox"]');

    let USER_CONTRACTS = [];

    $checkboxes.forEach($box => {
      $box.addEventListener('click', function () {
        if (!this.checked) {
          if (USER_CONTRACTS.length > 0) buildList(USER_CONTRACTS);
          return;
        }

        $checkboxes.forEach($el => $el.checked = this.name === $el.name);

        const elements = USER_CONTRACTS?.filter(el =>
          el.estado === this.name
        );

        if (USER_CONTRACTS.length > 0) buildList(elements);
      });
    });

    $propietarios.addEventListener('click', getAllElements);

    $inquilinos.addEventListener('click', getAllElements);

    $propietarios.addEventListener('keyup', getElementsByLikeSelection);

    $inquilinos.addEventListener('keyup', getElementsByLikeSelection);

    $modal_info.addEventListener('show.bs.modal', evt => {
      const $btn_info = evt.relatedTarget;
      const $text_space = $modal_info.querySelectorAll('.value');
      const $header = $modal_info.querySelector('.modal-header');
      const $h3 = $modal_info.querySelector('h3');

      const idContract = $btn_info.id;
      const element = USER_CONTRACTS.find(el => +el.id === +idContract);
      const flag = element.estado === 'vigente' || element.estado === 'pendiente';
      const states = {
        finalizado: 'bg-success',
        cancelado: 'bg-danger',
        pendiente: 'bg-info',
        vigente: 'bg-warning'
      };

      $header.className = `modal-header ${states[element.estado]}`;
      $h3.textContent = `${element.nombrePropietario} ${element.apellidoPropietario} - ${element.nombreInquilino} ${element.apellidoInquilino}`;

      $text_space.forEach($element => {
        const { id } = $element;
        const data = element[id];
        const flagClass = $element.classList.contains('date');

        if ($element.tagName === 'SPAN') {
          if (id !== 'diaDeCierre') return $element.textContent = (flagClass) ? formatDate(data) : data;

          $element.style.display = (element.estado === 'cancelado')
            ? 'block'
            : 'none';
          $element.innerHTML = `Fecha de cancelacion: <span class="fw-bold">${formatDate(data)}</span>.`;
        } else {
          $element.value = (flagClass) ? formatDate(data) : data;
          $element.readOnly = true;
          $element.style.width = (($element.value.length + 1) * 10) + "px";
        }
      });

      $modal_btn_edit.style.display = (flag) ? 'block' : 'none';
      $modal_btn_edit.setAttribute('data-id', idContract);
      $modal_btn_send.setAttribute('data-id', idContract);
    });

    $modal_btn_edit.addEventListener('click', buttonHandler);

    $modal_btn_send.addEventListener('click', async function () {
      if ($modal_btn_edit.textContent === 'Modificar') return;

      const $span_error = $modal_info.querySelector('.msj-error');
      const $inputs = $modal_info.querySelectorAll('input');

      const element = { id: +this.getAttribute('data-id') };
      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

      $inputs.forEach($input => {
        const { id, value, classList } = $input;

        element[id] = (classList.contains('date'))
          ? new Date(value).toISOString()
          : value;
      });

      try {
        const response = await fetch('/Contrato/EditElement', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
          },
          body: JSON.stringify(element)
        });

        if (!response.ok) throw new Error('Response 404');

        const { success, message } = await response.json();

        if (!success) return $span_error.innerHTML = `La fecha de cierre debe ser igual o previa a la fecha <span class="fw-bold">${message.split(':')[1].trim()}</span>.`;

        const contractEdit = USER_CONTRACTS.find(el => el.id === element.id);

        for (let [key, value] of Object.entries(element)) {
          contractEdit[key] = value;
        }

        USER_CONTRACTS.map(el => {
          return (el.id === contractEdit.id) ? contractEdit : el;
        });

        buttonHandler(element);
      } catch (err) {
        console.error('Failed update ' + err.message);

        alert('Failed update');
      }
    });

    async function getContracts(entity, dni) {
      try {
        const response = await fetch(`/Contrato/GetContracts?Entity=${entity}&Dni=${dni}`);

        if (!response.ok) throw new Error('Item not found');

        const { body } = await response.json();

        return body;
      } catch (err) {
        console.error('Failed recovery ' + err.message);

        alert('Failed recovery.');
      }
    }

    async function getActors(name) {
      try {
        const is = document.activeElement === $inquilinos;
        const endpoint = `Get${(is ? 'Tenants' : 'Owners')}`;
        const response = await fetch(`/Contrato/${endpoint}?Name=${name}`);

        if (!response.ok) throw new Error('Item not found');

        const { body } = await response.json();

        return body;
      } catch (err) {
        console.error('Failed recovery ' + err.message);

        alert('Failed recovery.');
      }
    }

    function buildTable(elements) {
      $table.querySelectorAll('tr').forEach($tr => $tr.remove());

      if (elements.length === 0) {
        const $tr = document.createElement('tr');
        const $td = document.createElement('td');

        $td.textContent = 'No hay resultados...';
        $td.colSpan = '3';

        $tr.appendChild($td);
        $table.appendChild($tr);

        return;
      }

      const $fragment = document.createDocumentFragment();

      for (let element of elements) {
        const $td_last_name = document.createElement('td');
        const $td_name = document.createElement('td');
        const $td_dni = document.createElement('td');
        const $tr = document.createElement('tr');

        const flag = document.activeElement === $propietarios;
        const { apellido, nombre, dni } = element;

        $td_last_name.textContent = apellido;
        $td_name.textContent = nombre;
        $td_dni.textContent = dni;
        $tr.dataType = (flag) ? 'propietario' : 'inquilino';
        $tr.id = dni;

        $tr.appendChild($td_name);
        $tr.appendChild($td_last_name);
        $tr.appendChild($td_dni);

        $tr.addEventListener('click', async function () {
          USER_CONTRACTS = await getContracts(this.dataType, this.id);
          let filter = '';

          $checkboxes.forEach($box => {
            filter = ($box.checked) ? $box.name : filter;
          });

          const elements = (!filter)
            ? USER_CONTRACTS
            : USER_CONTRACTS.filter(el => el.estado === filter);
          buildList(elements);
        });

        $fragment.appendChild($tr);
      }

      $table.appendChild($fragment);
    }

    function buildList(elements) {
      $list.querySelectorAll('li').forEach($li => $li.remove());

      if (elements.length === 0) {
        const $card = $template.content.cloneNode(true);
        const $header = $card.querySelector('.card-header');

        $header.firstElementChild.classList.replace('start-0', 'end-0');

        $card.querySelector('.card-title').textContent = 'Sin Resultados';
        $card.querySelector('.card-date').textContent = '-';
        $card.querySelector('.card-body').classList.add('bg-primary');
        $card.querySelectorAll('.btn').forEach($btn =>
          $btn.style.display = 'none'
        );

        $list.appendChild($card);

        return;
      }

      const $fragment = document.createDocumentFragment();

      for (let element of elements) {
        const {
          diaDeFinalizacion: diaFin,
          diaDeInicio: diaInicio,
          diaDeCierre: diaCierre,
          apellidoPropietario,
          nombrePropietario,
          apellidoInquilino,
          nombreInquilino,
          estado,
          id,
        } = element;

        const $card = $template.content.cloneNode(true);

        const date = `${formatDate(diaInicio)} - ${(estado === 'cancelado' ? formatDate(diaCierre) : formatDate(diaFin))}`;
        const nameP = `${nombrePropietario} ${apellidoPropietario}`;
        const nameI = `${nombreInquilino} ${apellidoInquilino}`;
        const states = {
          finalizado: 'bg-success',
          cancelado: 'bg-danger',
          pendiente: 'bg-info',
          vigente: 'bg-warning'
        };

        $card.querySelector('.card-title').textContent = `${nameP} - ${nameI}`;
        $card.querySelector('.card-date').textContent = date;
        if (estado === 'cancelado') $card.querySelector('.card-date').classList.add('text-danger');
        $card.querySelector('.card-body').classList.add(states[estado]);
        $card.querySelector('.btn-info').id = id;

        $fragment.appendChild($card);
      }

      $list.appendChild($fragment);
    }

    function buttonHandler(prop) {
      $modal_info.querySelector('.msj-error').textContent = '';
      
      const $inputs = $modal_info.querySelectorAll('input');
      const idContract = $modal_btn_edit.getAttribute('data-id');
      const element = (!prop?.isTrusted)
        ? prop
        : USER_CONTRACTS.find(el => +el.id === +idContract);
      const flag = $modal_btn_edit.textContent === 'Modificar';

      $inputs.forEach($input => {
        $input.classList.replace(
          (flag ? 'bg-warning' : 'bg-info'),
          (flag ? 'bg-info' : 'bg-warning'),
        );
        $input.style.width = (($input.value.length + 1) * 10) + "px";
        $input.readOnly = !flag;

        if (!$input.classList.contains('date')) return;

        $input.type = (flag) ? 'date' : 'text';

        if (!flag) $input.value = formatDate(element[$input.id]);
        else $input.value = element[$input.id].substring(0, 10);
      });

      $modal_btn_send.style.display = (flag) ? 'block' : 'none';
      $modal_btn_edit.textContent = (flag) ? 'Cancelar' : 'Modificar';
    }

    async function getElementsByLikeSelection(evt) {
      // Ignorar teclas de control (Shift, Alt, Ctrl, etc.)
      if (evt.ctrlKey || evt.altKey || evt.metaKey) return;

      // Ignorar teclas que no son un solo carácter (ej: "Shift", "ArrowUp")
      if (evt.key.length > 1 && evt.key !== "Backspace") return;

      // Validar solo letras, números y backspace
      if (!/^[A-Za-z]$/.test(evt.key) && evt.key !== "Backspace") return;

      $list.querySelectorAll('li').forEach($li => $li.remove());
      USER_CONTRACTS = [];

      const elements = await getActors(evt.target.value);

      buildTable(elements);
    }

    async function getAllElements(evt) {
      const elements = await getActors(evt.target.value);

      buildTable(elements);
    }

    function formatDate(date) {
      return date
        .substring(0, 10)
        .split('-')
        .reverse()
        .join('/');
    }
  </script>
}