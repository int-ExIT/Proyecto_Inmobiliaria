@model IEnumerable<Inmobiliaria.Models.Contrato>
@{
  ViewData["Title"] = "Contratos";
  ViewData["Subtitle"] = " Contratos";
}

<div class="container-fluid text-center d-grid gap-4">
  @* Modal de edicion de datos *@
  @await Html.PartialAsync("_EditModal", new Inmobiliaria.Models.ViewModels.ContratoEditVm())
  @* Modal de edicion de estado *@
  @await Html.PartialAsync("_EditStateModal")
  @* Modal de informacion *@
  @await Html.PartialAsync("_ViewInfoModal")

  @* Titulo *@
  <div>
    <h1>Bienvenido a Contratos</h1>
  </div>
  @* Formulario *@
  <div class="bg-dark container-fluid p-3 text-white">
    <form action="">
      <label for="filter">Buscar: </label>
      <select name="filter" id="filter">
        <option value="prietario" selected>Propietario</option>
        <option value="inquilino">Inquilino</option>
      </select>
      <input type="text" name="filter">
    </form>
  </div>
  <div class="d-flex flex-wrap justify-content-center">
    @if (Model?.Any() == true)
    {
      @foreach (var Obj in Model)
      {
        <div data-coor="Obj.Coordenadas" class="card border-dark col-5 m-1">
          <div class="card-header bg-dark text-white">
            <h5 class="card-direccion card-title mb-0">Ubicado en Obj.Direccion</h5>
          </div>

          <div class="card-body div-info text-start d-flex">
            <div class="d-flex flex-column col-6">
              <h6 class="card-text mb-1">Obj.Tipo - Obj.TipoDeUso</h6>
              <h6 class="card-info card-cuartos card-text mb-1">Obj.NumeroDeCuartos (Obj.NumeroDeCuartos == 1 ? "habitacion" : "habitaciones")</h6>
              <h6 class="card-precio card-text">$Obj.Precio</h6>
            </div>
          </div>

          <div class="card-footer div-action border-dark bg-dark text-white">
            <button class="btn btn-sm bg-primary text-white mx-1" data-bs-toggle="modal" data-bs-target="#viewInfoModal"
              data-coor="Obj.Coordenadas">
              Ver propietario
            </button>
            <button class="btn btn-sm bg-success text-white mx-1" data-bs-toggle="modal" data-bs-target="#editModal"
              data-coor="Obj.Coordenadas">
              Editar
            </button>
            <button class="btn-state btn btn-sm bg-danger text-white mx-1" data-bs-toggle="modal"
              data-bs-target="#editStateModal" data-coor="Obj.Coordenadas">
              Dar de ((Obj.Estado) ? "baja" : "alta")
            </button>
          </div>
        </div>
      }
    }
    else
    {
      <div class="card col-12">
        <div class="card-body">
          <h5 class="card-text">No se encontraron resultados...</h5>
        </div>
      </div>
    }
    </ul>
  </div>
</div>

@section Scripts
{
  @await Html.PartialAsync("_ValidationsScriptsPartial")

  <script type="module">
    const $modal_edit = document.querySelector('#editModal');
    const $modal_state = document.querySelector('#editStateModal');
    const $btn_confirm = document.querySelector('#confirm-state');
    const $form_edit = document.querySelector('#edit-form');

    $modal_edit.addEventListener('show.bs.modal', async evt => {
      $modal_edit.querySelectorAll('input').forEach($input => {
        if ($input.name !== '__RequestVerificationToken') $input.value = "";
      });

      const $btn_edit = evt.relatedTarget;
      const coordenadas = $btn_edit.getAttribute('data-coor');

      try {
        const response = await fetch(`/Inmueble/GetElement?Coordenadas=${coordenadas}`);

        if (!response.ok) throw new Error('No se pudo recuperar al usuario');

        const { body } = await response.json();

        // Agregar datos al form:
        $modal_edit.querySelector('input[name="Coordenadas"]').value = parseFloat(body.coordenadas).toFixed(6);
        $modal_edit.querySelector('input[name="Direccion"]').value = body.direccion;
        $modal_edit.querySelector('input[name="TipoDeUso"]').value = body.tipoDeUso;
        $modal_edit.querySelector('input[name="Tipo"]').value = body.tipo;
        $modal_edit.querySelector('input[name="NumeroDeCuartos"]').value = body.numeroDeCuartos;
        $modal_edit.querySelector('input[name="Precio"]').value = body.precio;
      } catch (err) {
        console.error('Failed recovery ' + err.message);

        bootstrap.Modal.getInstance($modal_edit)?.hide();

        alert('Failed recovery.');
      }
    });

    $form_edit.addEventListener('submit', async evt => {
      evt.preventDefault();

      const formData = new FormData($form_edit);

      try {
        const response = await fetch('/Inmueble/EditElement', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) throw new Error('Failed update');

        const { body } = await response.json();
        const $card_edit = document.querySelector(`div[data-coor="${parseFloat(body.coordenadas).toFixed(6)}"]`);

        $card_edit.querySelector('.card-direccion').textContent = `Ubicado en ${body.direccion}`;
        $card_edit.querySelector('.card-info').textContent = `${body.tipo} - ${body.tipoDeUso}`;
        $card_edit.querySelector('.card-cuartos').textContent = `${body.numeroDeCuartos} ${(body.numeroDeCuartos == 1 ? 'habitacion' : 'habitaciones')}`;
        $card_edit.querySelector('.card-precio').textContent = `$${body.precio}`;

        console.log('Successful update');

        bootstrap.Modal.getInstance($modal_edit).hide();
      } catch (err) {
        console.error('Failed update ' + err);

        alert('Failed update');
      }
    });

    $modal_state.addEventListener('show.bs.modal', async evt => {
      const $btn_state = evt.relatedTarget;
      const $h3 = $modal_state.querySelector('h3');
      const coordenadas = $btn_state.getAttribute('data-coor');

      try {
        const response = await fetch(`/Inmueble/GetElement?Coordenadas=${coordenadas}`);

        if (!response.ok) throw new Error('Failed selection');

        const { body } = await response.json();

        $modal_state.dataset.coordenadas = coordenadas;
        $h3.textContent = `Esta por dar de ${(body.estado) ? 'baja' : 'alta'} al inmueble ubicado en calle ${body.direccion}.`;
      } catch (err) {
        console.error('Failed recovery ' + err.message);

        bootstrap.Modal.getInstance($modal_state)?.hide();

        alert('Failed recovery.');
      }
    });

    $btn_confirm.addEventListener('click', async evt => {
      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const coordenadas = $modal_state.dataset.coordenadas;

      try {
        const response = await fetch(`/Inmueble/EditState?Coordenadas=${coordenadas}`, {
          method: 'POST',
          headers: {
            'RequestVerificationToken': token
          }
        });

        if (!response.ok) throw new Error('Response 404');

        const { state } = await response.json();
        const $card_edit = document.querySelector(`div[data-coor="${coordenadas}"]`);
        const $btn_state = $card_edit.querySelector('.btn-state');

        $btn_state.textContent = `Dar de ${(state ? 'alta' : 'baja')}`;

        console.log('Successful update');

        bootstrap.Modal.getInstance($modal_state).hide();
      } catch (err) {
        console.error('Failed update ' + err.message);

        alert('Failed update');
      }
    });
  </script>
}